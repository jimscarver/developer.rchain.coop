// Placing and sending pizza orders
new result, pizzaShop, ack1, ack2, ack3, ack4, ack5 in {
    // let's order a pizza
    pizzaShop!("order", "large pepperoni", *ack1) |
    pizzaShop!("order", "small sausage", *ack2) |
    pizzaShop!("order", "hawaiian", *ack3) |
    pizzaShop!("order", "large sausage", *ack4) |
    pizzaShop!("order", "small pepperoni", *ack5) |
    for (r1 <- ack1; r2 <- ack2; r3 <- ack3; r4 <- ack4; r5 <- ack5) {
        pizzaShop!("sales", *result)
        |
        result!(*r1) |
        result!(*r2) |
        result!(*r3) |
        result!(*r4) |
        result!(*r5)
    }
    |
    // The pizza shop behaves differently
    // depending on what we order
    new countCh, salesCh in {
        countCh!(0)
        |
        salesCh!([])
        |
        contract pizzaShop(@"sales", return) = {
            for (@items <<- salesCh; @count <<- countCh) {
                return!({"count": count, "items": items})
            }
        }
        |
        contract pizzaShop(@"order", @order, replyChannel) = {
            for (@count <- countCh; @items <- salesCh) {
                match (count + 1) {
                    updated => {
                        countCh!(updated)
                        |
                        salesCh!(items ++ [order])
                        |
                        match (count % 3) {
                            0 => {
                                // winner!
                                replyChannel!({"drink": "coke",
                                "pizza": order})
                            }
                            _ => {
                                // winner!
                                replyChannel!({"pizza": order})
                            }
                        }
                    }
                }
            }
        }
    }
}
